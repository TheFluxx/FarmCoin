import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from sqlalchemy import create_engine, Column, Integer, String, Boolean, BigInteger, ARRAY
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = '7246960528:AAEeMj2VS8nnnVHL1U1BoNdW_T4BXFNJvSc'
MINI_APP_URL = 'https://t.me/FarmerTapBot/clicker'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = 'postgresql://clicker_user:rootroot@localhost:5432/farmclicker'

engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()
Base = declarative_base()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ User
class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, autoincrement=True)
    telegram_id = Column(BigInteger, unique=True)
    telegram_username = Column(String)
    farm_coins = Column(Integer, default=1000000)
    multitap = Column(Integer, default=1)
    able = Column(Integer, default=6500)
    energy = Column(Integer, default=6500)
    autofarm = Column(Boolean, default=False)
    current_skin = Column(String, default='./img/coin-btn.png')
    skins = Column(ARRAY(String), default=['./img/coin-btn.png'])
    tasks_id_done = Column(ARRAY(Integer), default=[])
    referer = Column(BigInteger, nullable=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
Base.metadata.create_all(engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(CommandStart())
async def start_command(message: types.Message):
    telegram_id = message.from_user.id
    telegram_username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(telegram_id=telegram_id, telegram_username=telegram_username)
        session.add(user)
        session.commit()
        await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {telegram_username}! üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.reply(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, {telegram_username}.")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ mini app
    keyboard = InlineKeyboardMarkup()
    mini_app_button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ mini app üöÄ", url=MINI_APP_URL)
    keyboard.add(mini_app_button)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {telegram_username}! üëã\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Farmer Tap! üåæ\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –Ω–∞—à mini app –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ"
    )

    await message.answer(welcome_text, reply_markup=keyboard)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)